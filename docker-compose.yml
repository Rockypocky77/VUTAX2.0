version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vutax-postgres
    environment:
      POSTGRES_DB: vutax
      POSTGRES_USER: vutax_user
      POSTGRES_PASSWORD: vutax_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - vutax-network
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vutax-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vutax-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # ML Service (Python FastAPI)
  ml-service:
    build:
      context: ./backend/ml-service
      dockerfile: Dockerfile
    container_name: vutax-ml-service
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://vutax_user:vutax_password@postgres:5432/vutax
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY}
      - POLYGON_API_KEY=${POLYGON_API_KEY}
      - PYTHON_ENV=development
    volumes:
      - ./backend/ml-service:/app
      - ml_models:/app/models/saved
    depends_on:
      - postgres
      - redis
    networks:
      - vutax-network
    restart: unless-stopped

  # API Gateway (Node.js/Express)
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
    container_name: vutax-api-gateway
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://vutax_user:vutax_password@postgres:5432/vutax
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ML_SERVICE_URL=http://ml-service:8001
      - RESEND_API_KEY=${RESEND_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - FRONTEND_URL=http://localhost:3000
    volumes:
      - ./backend/api-gateway:/app
      - /app/node_modules
    depends_on:
      - postgres
      - redis
      - ml-service
    networks:
      - vutax-network
    restart: unless-stopped

  # Training Progress Tracker (Flask)
  training-tracker:
    build:
      context: ./backend/training-tracker
      dockerfile: Dockerfile
    container_name: vutax-training-tracker
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=development
      - ML_SERVICE_URL=http://ml-service:8001
    volumes:
      - ./backend/training-tracker:/app
    depends_on:
      - ml-service
    networks:
      - vutax-network
    restart: unless-stopped

  # Frontend (Next.js) - Development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: vutax-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_ML_API_URL=http://localhost:8001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - api-gateway
    networks:
      - vutax-network
    restart: unless-stopped

  # Nginx (Production Proxy)
  nginx:
    image: nginx:alpine
    container_name: vutax-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - vutax-network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: vutax-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - vutax-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: vutax-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - vutax-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  vutax-network:
    driver: bridge
